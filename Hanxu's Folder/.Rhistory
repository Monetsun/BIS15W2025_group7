geom_point(alpha = 0.5, color = "blue1") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Caffeine Intake vs. Stress Level (Age:", input$age, ")"),
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
})
# Screen Time vs Stress Level Plot
output$screen_time_plot <- renderPlot({
ggplot(filtered_data(), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Screen Time vs. Stress Level (Age:", input$age, ")"),
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
})
}
shinyApp(ui, server)
cor(sleep$screen_time_before_bed_mins, sleep$stress_level)
library(shiny)
ui <- fluidPage(titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:",
choices = unique(sleep$age),
selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
# Define Server
server <- function(input, output) {
# Filter dataset based on selected age group
filtered_data <- reactive({
sleep %>% filter(age == input$age)
})
# Caffeine vs Stress Level Plot
output$caffeine_plot <- renderPlot({
ggplot(filtered_data(), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue1") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Caffeine Intake vs. Stress Level (Age:", input$age, ")"),
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
})
# Screen Time vs Stress Level Plot
output$screen_time_plot <- renderPlot({
ggplot(filtered_data(), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Screen Time vs. Stress Level (Age:", input$age, ")"),
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:",
choices = unique(sleep$age),
selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
# Define Server
server <- function(input, output) {
# Filter dataset based on selected age group
filtered_data <- reactive({
sleep %>% filter(age == desc(input$age))
})
# Caffeine vs Stress Level Plot
output$caffeine_plot <- renderPlot({
ggplot(filtered_data(), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue1") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Caffeine Intake vs. Stress Level (Age:", input$age, ")"),
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
})
# Screen Time vs Stress Level Plot
output$screen_time_plot <- renderPlot({
ggplot(filtered_data(), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Screen Time vs. Stress Level (Age:", input$age, ")"),
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:",
choices = desc(unique(sleep$age)),
selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
# Define Server
server <- function(input, output) {
# Filter dataset based on selected age group
filtered_data <- reactive({
sleep %>% filter(age == input$age)
})
# Caffeine vs Stress Level Plot
output$caffeine_plot <- renderPlot({
ggplot(filtered_data(), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue1") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Caffeine Intake vs. Stress Level (Age:", input$age, ")"),
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
})
# Screen Time vs Stress Level Plot
output$screen_time_plot <- renderPlot({
ggplot(filtered_data(), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Screen Time vs. Stress Level (Age:", input$age, ")"),
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:",
choices = unique(desc(sleep$age)),
selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
# Define Server
server <- function(input, output) {
# Filter dataset based on selected age group
filtered_data <- reactive({
sleep %>% filter(age == input$age)
})
# Caffeine vs Stress Level Plot
output$caffeine_plot <- renderPlot({
ggplot(filtered_data(), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue1") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Caffeine Intake vs. Stress Level (Age:", input$age, ")"),
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
})
# Screen Time vs Stress Level Plot
output$screen_time_plot <- renderPlot({
ggplot(filtered_data(), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Screen Time vs. Stress Level (Age:", input$age, ")"),
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:",
choices = unique(sleep$age),
selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
# Define Server
server <- function(input, output) {
# Filter dataset based on selected age group
filtered_data <- reactive({
sleep %>% filter(age == input$age)
})
# Caffeine vs Stress Level Plot
output$caffeine_plot <- renderPlot({
ggplot(filtered_data(), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue1") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Caffeine Intake vs. Stress Level (Age:", input$age, ")"),
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
})
# Screen Time vs Stress Level Plot
output$screen_time_plot <- renderPlot({
ggplot(filtered_data(), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Screen Time vs. Stress Level (Age:", input$age, ")"),
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:",
choices = sort(unique(sleep$age)),
selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
# Define Server
server <- function(input, output) {
# Filter dataset based on selected age group
filtered_data <- reactive({
sleep %>% filter(age == input$age)
})
# Caffeine vs Stress Level Plot
output$caffeine_plot <- renderPlot({
ggplot(filtered_data(), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue1") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Caffeine Intake vs. Stress Level (Age:", input$age, ")"),
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
})
# Screen Time vs Stress Level Plot
output$screen_time_plot <- renderPlot({
ggplot(filtered_data(), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Screen Time vs. Stress Level (Age:", input$age, ")"),
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
})
}
shinyApp(ui, server)
cor(sleep$caffeine_intake_mg, sleep$stress_level)
cor(sleep$screen_time_before_bed_mins, sleep$stress_level)
library(shiny)
ui <- fluidPage(titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:",
choices = sort(unique(sleep$age)),
selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
# Define Server
server <- function(input, output) {
# Filter dataset based on selected age group
filtered_data <- reactive({
sleep %>% filter(age == input$age)
})
# Caffeine vs Stress Level Plot
output$caffeine_plot <- renderPlot({
ggplot(filtered_data(), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue1") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Caffeine Intake vs. Stress Level (Age:", input$age, ")"),
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
})
# Screen Time vs Stress Level Plot
output$screen_time_plot <- renderPlot({
ggplot(filtered_data(), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Screen Time vs. Stress Level (Age:", input$age, ")"),
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library("naniar")
library("janitor")
library(shiny)
library(ggplot2)
library(dplyr)
sleep <- read_csv("sleep_cycle_productivity.csv")
colnames(sleep) <- c("date", "person_id", "age", "gender", "sleep_start_time", "sleep_end_time",
"total_sleep_hours", "sleep_quality", "exercise_mins_per_day", "caffeine_intake_mg", "screen_time_before_bed_mins", "work_hours_per_day", "productivity_score", "mood_score", "stress_level")
names(sleep)
glimpse(sleep)
summary(sleep)
anyNA(sleep)
sleep_caffeine_avg <- sleep %>%
group_by(stress_level) %>%
summarize(avg_caffeine_per_stress_level = mean(caffeine_intake_mg, na.rm = TRUE))
sleep_avg
cor(sleep$caffeine_intake_mg, sleep$stress_level)
cor(sleep$screen_time_before_bed_mins, sleep$stress_level)
p <- sleep_caffeine_avg %>%
ggplot(aes(x = avg_caffeine_per_stress_level, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal()+
labs(title = "Caffeine Intake vs. Stress Level",
x = "Average Caffeine Intake (mg) per Stress Level",
y = "Stress Level Score (1-10)")+
theme_bw()+
theme(axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill = NA, size = 1))+
theme(plot.title=element_text(size=rel(1.5), hjust=.5))
ggsave("caffeine_vs_stress.png", plot = p, width = 8, height = 5, dpi = 300)
sleep_screen_avg <- sleep %>%
group_by(stress_level) %>%
summarize(avg_screen_time_per_stress_level = mean(screen_time_before_bed_mins, na.rm = TRUE))
sleep_screen_avg
q <- sleep_screen_avg %>%
ggplot(aes(x = avg_screen_time_per_stress_level, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
#facet_wrap(~ age_group) +
theme_minimal() +
labs(title = "Screen Time Before Bed vs. Stress Level",
x = "Avearge Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")+
theme_bw()+
theme(axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill = NA, size = 1))+
theme(plot.title=element_text(size=rel(1.5), hjust=.5))
ggsave("screen_time_vs_stress.png", plot = q, width = 8, height = 5, dpi = 300)
p <- sleep_caffeine_avg %>%
ggplot(aes(x = avg_caffeine_per_stress_level, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal()+
labs(title = "Caffeine Intake vs. Stress Level",
x = "Average Caffeine Intake (mg) per Stress Level",
y = "Stress Level Score (1-10)")+
theme_bw()+
theme(axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill = NA, size = 1))+
theme(plot.title=element_text(size=rel(1.5), hjust=.5))
ggsave("caffeine_vs_stress.png", plot = p, width = 8, height = 5, dpi = 300)
knitr::opts_chunk$set(echo = TRUE)
ui <- navbarPage("Multi-App Dashboard",
tabPanel("Caffeine & Sleep",
fluidPage(
titlePanel("Caffeine Intake vs Sleep Start Time"),
sidebarLayout(
sidebarPanel(
selectInput("gender", "Select Gender", choices=c("Female", "Male"), selected="Female"),
numericInput("age", "Select Age", value = 25, min = 18, max = 60)
),
mainPanel(
plotOutput("caffeine_sleep_plot")
)
)
)
),
tabPanel("Sleep & Productivity",
fluidPage(
titlePanel("Sleep Quality vs Productivity & Stress"),
sidebarLayout(
sidebarPanel(
sliderInput("sleep_filter", "Filter by Total Sleep Hours:", min = 4, max = 10, value = 6, step = 0.5)
),
mainPanel(
fluidRow(
column(6, plotOutput("plot_productivity")),
column(6, plotOutput("plot_stress"))
)
)
)
)
),
tabPanel("Sleep Quality vs Mood",
fluidPage(
titlePanel("Sleep Quality vs. Mood Score Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("x", "Select X Variable", choices = c("sleep_quality", "mood_score"), selected = "sleep_quality"),
selectInput("y", "Select Y Variable", choices = c("sleep_quality", "mood_score"), selected = "mood_score"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
checkboxInput("show_line", "Show Regression Line", value = TRUE)
),
mainPanel(
plotOutput("scatterPlot")
)
)
)
),
tabPanel("Stress vs Caffeine & Screen Time",
fluidPage(
titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:", choices = sort(unique(sleep$age)), selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
)
)
# Define Server
server <- function(input, output) {
# Caffeine & Sleep Plot
output$caffeine_sleep_plot <- renderPlot({
sleep %>%
filter(gender == input$gender, age == input$age) %>%
ggplot(aes(x = caffeine_intake_mg, y = sleep_start_time)) +
geom_point(alpha=0.8, color="skyblue") +
geom_smooth(method="lm", color="red") +
labs(x = "Caffeine Intake (mg)", y = "Sleep Start Time", title = "Caffeine vs Sleep")
})
# Sleep Productivity & Stress Plots
output$plot_productivity <- renderPlot({
sleep %>%
filter(gender !="Other") %>%
filter(total_sleep_hours >= input$sleep_filter - 0.25 & total_sleep_hours <= input$sleep_filter + 0.25) %>%
ggplot(aes(x = productivity_score, fill = gender)) +
geom_density(alpha = 0.5) +
theme_minimal()
})
output$plot_stress <- renderPlot({
sleep %>%
filter(gender !="Other") %>%
filter(total_sleep_hours >= input$sleep_filter - 0.25 & total_sleep_hours <= input$sleep_filter + 0.25) %>%
ggplot(aes(x = stress_level, fill = gender)) +
geom_density(alpha = 0.5) +
theme_minimal()
})
# Sleep Quality vs Mood Scatterplot
output$scatterPlot <- renderPlot({
p <- ggplot(sleep, aes_string(x = input$x, y = input$y)) +
geom_point(size = input$pointsize, color = "blue", alpha = 0.6) +
theme_minimal()
if (input$show_line) {
p <- p + geom_smooth(method = "lm", color = "red")
}
p
})
# Caffeine vs Stress & Screen Time vs Stress
output$caffeine_plot <- renderPlot({
ggplot(sleep %>% filter(age == input$age), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", color = "red") +
theme_minimal()
})
output$screen_time_plot <- renderPlot({
ggplot(sleep %>% filter(age == input$age), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", color = "red") +
theme_minimal()
})
}
shinyApp(ui, server)
