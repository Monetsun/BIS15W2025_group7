server <- function(input, output) {
# Filter dataset based on selected age group
filtered_data <- reactive({
sleep %>% filter(age == input$age)
})
# Caffeine vs Stress Level Plot
output$caffeine_plot <- renderPlot({
ggplot(filtered_data(), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue1") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Caffeine Intake vs. Stress Level (Age:", input$age, ")"),
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
})
# Screen Time vs Stress Level Plot
output$screen_time_plot <- renderPlot({
ggplot(filtered_data(), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Screen Time vs. Stress Level (Age:", input$age, ")"),
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
})
}
shinyApp(ui, server)
sleep %>%
group_by(stress_level) %>%
summarize(avg_caffeine_per_stress_level = mean(caffeine_intake_mg, na.rm = TRUE))
sleep_avg <- sleep %>%
group_by(stress_level) %>%
summarize(avg_caffeine_per_stress_level = mean(caffeine_intake_mg, na.rm = TRUE))
sleep_avg <- sleep %>%
group_by(stress_level) %>%
summarize(avg_caffeine_per_stress_level = mean(caffeine_intake_mg, na.rm = TRUE))
sleep_avg
sleep_avg %>%
ggplot(aes(x = avg_caffeine_per_stress_level, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = "Caffeine Intake vs. Stress Level",
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
# barplot
# geom_line
sleep_avg %>%
ggplot(aes(x = stress_level, y = avg_caffeine_per_stress_level)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = "Caffeine Intake vs. Stress Level",
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
# barplot
# geom_line
sleep_avg %>%
ggplot(aes(x = stress_level, y = avg_caffeine_per_stress_level)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
# labs(title = "Caffeine Intake vs. Stress Level",
# x = "Caffeine Intake (mg)",
#  y = "Stress Level (1-10)")
# barplot
# geom_line
sleep_avg %>%
ggplot(aes(x = stress_level, y = avg_caffeine_per_stress_level)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal()
# labs(title = "Caffeine Intake vs. Stress Level",
# x = "Caffeine Intake (mg)",
#  y = "Stress Level (1-10)")
# barplot
# geom_line
sleep_avg %>%
ggplot(aes(x = avg_caffeine_per_stress_level, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal()
# labs(title = "Caffeine Intake vs. Stress Level",
# x = "Caffeine Intake (mg)",
#  y = "Stress Level (1-10)")
# barplot
# geom_line
sleep_avg %>%
ggplot(aes(x = avg_caffeine_per_stress_level, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal()+
labs(title = "Caffeine Intake vs. Stress Level",
x = "Caffeine Intake (mg) per Stress Level",
y = "Stress Level Score (1-10)")
# barplot
# geom_line
sleep_caffeine_avg <- sleep %>%
group_by(stress_level) %>%
summarize(avg_caffeine_per_stress_level = mean(caffeine_intake_mg, na.rm = TRUE))
sleep_avg
sleep_caffeine_avg %>%
ggplot(aes(x = avg_caffeine_per_stress_level, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal()+
labs(title = "Caffeine Intake vs. Stress Level",
x = "Caffeine Intake (mg) per Stress Level",
y = "Stress Level Score (1-10)")
sleep_screen_avg <- sleep %>%
group_by(stress_level) %>%
summarize(avg_screen_time_per_stress_level = mean(screen_time_before_bed_mins, na.rm = TRUE))
sleep_screen_avg
sleep %>%
ggplot(aes(x = avg_screen_time_per_stress_level, y = stress_level)) +
geom_line(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
#facet_wrap(~ age_group) +
theme_minimal() +
labs(title = "Screen Time Before Bed vs. Stress Level by Age Group",
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
sleep_screen_avg %>%
ggplot(aes(x = avg_screen_time_per_stress_level, y = stress_level)) +
geom_line(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
#facet_wrap(~ age_group) +
theme_minimal() +
labs(title = "Screen Time Before Bed vs. Stress Level by Age Group",
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
sleep_screen_avg %>%
ggplot(aes(x = avg_screen_time_per_stress_level, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
#facet_wrap(~ age_group) +
theme_minimal() +
labs(title = "Screen Time Before Bed vs. Stress Level by Age Group",
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
sleep_screen_avg %>%
ggplot(aes(x = avg_screen_time_per_stress_level, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
#facet_wrap(~ age_group) +
theme_minimal() +
labs(title = "Screen Time Before Bed vs. Stress Level",
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
library("tidyverse")
library("janitor")
library("shiny")
library("ggthemes")
library("RColorBrewer")
library("paletteer")
heart <- read_csv("data/heart.csv")
cor(sleep$caffeine_intake_mg, sleep$stress_level)
library(shiny)
ui <- fluidPage(titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:",
choices = unique(sleep$age),
selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
# Define Server
server <- function(input, output) {
# Filter dataset based on selected age group
filtered_data <- reactive({
sleep %>% filter(age == input$age)
})
# Caffeine vs Stress Level Plot
output$caffeine_plot <- renderPlot({
ggplot(filtered_data(), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue1") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Caffeine Intake vs. Stress Level (Age:", input$age, ")"),
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
})
# Screen Time vs Stress Level Plot
output$screen_time_plot <- renderPlot({
ggplot(filtered_data(), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Screen Time vs. Stress Level (Age:", input$age, ")"),
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
})
}
shinyApp(ui, server)
cor(sleep$screen_time_before_bed_mins, sleep$stress_level)
library(shiny)
ui <- fluidPage(titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:",
choices = unique(sleep$age),
selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
# Define Server
server <- function(input, output) {
# Filter dataset based on selected age group
filtered_data <- reactive({
sleep %>% filter(age == input$age)
})
# Caffeine vs Stress Level Plot
output$caffeine_plot <- renderPlot({
ggplot(filtered_data(), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue1") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Caffeine Intake vs. Stress Level (Age:", input$age, ")"),
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
})
# Screen Time vs Stress Level Plot
output$screen_time_plot <- renderPlot({
ggplot(filtered_data(), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Screen Time vs. Stress Level (Age:", input$age, ")"),
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:",
choices = unique(sleep$age),
selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
# Define Server
server <- function(input, output) {
# Filter dataset based on selected age group
filtered_data <- reactive({
sleep %>% filter(age == desc(input$age))
})
# Caffeine vs Stress Level Plot
output$caffeine_plot <- renderPlot({
ggplot(filtered_data(), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue1") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Caffeine Intake vs. Stress Level (Age:", input$age, ")"),
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
})
# Screen Time vs Stress Level Plot
output$screen_time_plot <- renderPlot({
ggplot(filtered_data(), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Screen Time vs. Stress Level (Age:", input$age, ")"),
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:",
choices = desc(unique(sleep$age)),
selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
# Define Server
server <- function(input, output) {
# Filter dataset based on selected age group
filtered_data <- reactive({
sleep %>% filter(age == input$age)
})
# Caffeine vs Stress Level Plot
output$caffeine_plot <- renderPlot({
ggplot(filtered_data(), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue1") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Caffeine Intake vs. Stress Level (Age:", input$age, ")"),
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
})
# Screen Time vs Stress Level Plot
output$screen_time_plot <- renderPlot({
ggplot(filtered_data(), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Screen Time vs. Stress Level (Age:", input$age, ")"),
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:",
choices = unique(desc(sleep$age)),
selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
# Define Server
server <- function(input, output) {
# Filter dataset based on selected age group
filtered_data <- reactive({
sleep %>% filter(age == input$age)
})
# Caffeine vs Stress Level Plot
output$caffeine_plot <- renderPlot({
ggplot(filtered_data(), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue1") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Caffeine Intake vs. Stress Level (Age:", input$age, ")"),
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
})
# Screen Time vs Stress Level Plot
output$screen_time_plot <- renderPlot({
ggplot(filtered_data(), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Screen Time vs. Stress Level (Age:", input$age, ")"),
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:",
choices = unique(sleep$age),
selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
# Define Server
server <- function(input, output) {
# Filter dataset based on selected age group
filtered_data <- reactive({
sleep %>% filter(age == input$age)
})
# Caffeine vs Stress Level Plot
output$caffeine_plot <- renderPlot({
ggplot(filtered_data(), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue1") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Caffeine Intake vs. Stress Level (Age:", input$age, ")"),
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
})
# Screen Time vs Stress Level Plot
output$screen_time_plot <- renderPlot({
ggplot(filtered_data(), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Screen Time vs. Stress Level (Age:", input$age, ")"),
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:",
choices = sort(unique(sleep$age)),
selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
# Define Server
server <- function(input, output) {
# Filter dataset based on selected age group
filtered_data <- reactive({
sleep %>% filter(age == input$age)
})
# Caffeine vs Stress Level Plot
output$caffeine_plot <- renderPlot({
ggplot(filtered_data(), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue1") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Caffeine Intake vs. Stress Level (Age:", input$age, ")"),
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
})
# Screen Time vs Stress Level Plot
output$screen_time_plot <- renderPlot({
ggplot(filtered_data(), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Screen Time vs. Stress Level (Age:", input$age, ")"),
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
})
}
shinyApp(ui, server)
cor(sleep$caffeine_intake_mg, sleep$stress_level)
cor(sleep$screen_time_before_bed_mins, sleep$stress_level)
library(shiny)
ui <- fluidPage(titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:",
choices = sort(unique(sleep$age)),
selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
# Define Server
server <- function(input, output) {
# Filter dataset based on selected age group
filtered_data <- reactive({
sleep %>% filter(age == input$age)
})
# Caffeine vs Stress Level Plot
output$caffeine_plot <- renderPlot({
ggplot(filtered_data(), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue1") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Caffeine Intake vs. Stress Level (Age:", input$age, ")"),
x = "Caffeine Intake (mg)",
y = "Stress Level (1-10)")
})
# Screen Time vs Stress Level Plot
output$screen_time_plot <- renderPlot({
ggplot(filtered_data(), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = paste("Screen Time vs. Stress Level (Age:", input$age, ")"),
x = "Screen Time Before Bed (mins)",
y = "Stress Level (1-10)")
})
}
shinyApp(ui, server)
