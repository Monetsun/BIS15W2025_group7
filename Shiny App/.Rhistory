sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:", choices = sort(unique(sleep$age)), selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
)
)
# Define Server
server <- function(input, output) {
# Caffeine & Sleep Plot
output$caffeine_sleep_plot <- renderPlot({
sleep %>%
filter(gender == input$gender, age == input$age) %>%
ggplot(aes(x = caffeine_intake_mg, y = sleep_start_time)) +
geom_point(alpha=0.8, color="skyblue") +
geom_smooth(method="lm", color="red") +
labs(x = "Caffeine Intake (mg)", y = "Sleep Start Time", title = "Caffeine vs Sleep")
})
# Sleep Productivity & Stress Plots
output$plot_productivity <- renderPlot({
sleep %>%
filter(gender !="Other") %>%
filter(total_sleep_hours >= input$sleep_filter - 0.25 & total_sleep_hours <= input$sleep_filter + 0.25) %>%
ggplot(aes(x = productivity_score, fill = gender)) +
geom_density(alpha = 0.5) +
theme_minimal()
})
output$plot_stress <- renderPlot({
sleep %>%
filter(gender !="Other") %>%
filter(total_sleep_hours >= input$sleep_filter - 0.25 & total_sleep_hours <= input$sleep_filter + 0.25) %>%
ggplot(aes(x = stress_level, fill = gender)) +
geom_density(alpha = 0.5) +
theme_minimal()
})
# Sleep Quality vs Mood Scatterplot
output$scatterPlot <- renderPlot({
p <- ggplot(sleep, aes_string(x = input$x, y = input$y)) +
geom_point(size = input$pointsize, color = "blue", alpha = 0.6) +
theme_minimal()
if (input$show_line) {
p <- p + geom_smooth(method = "lm", color = "red")
}
p
})
# Caffeine vs Stress & Screen Time vs Stress
output$caffeine_plot <- renderPlot({
ggplot(sleep %>% filter(age == input$age), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", color = "red") +
theme_minimal()
})
output$screen_time_plot <- renderPlot({
ggplot(sleep %>% filter(age == input$age), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", color = "red") +
theme_minimal()
})
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(ggplot2)
# Define UI
ui <- fluidPage(
titlePanel(tags$h1("Sleep, Productivity & Well-being", style = "font-size: 36px;")),
sidebarLayout(
sidebarPanel(
sliderInput("sleep_filter",
"Filter by Total Sleep Hours:",
min = 4, max = 10, value = 6, step = 0.5)
),
mainPanel(
fluidRow(
column(6, plotOutput("plot_productivity", width = "100%", height = "700px")),  # Left density plot
column(6, plotOutput("plot_stress", width = "100%", height = "700px"))  # Right density plot
)
)
)
)
# Define Server
server <- function(input, output, session) {
session$onSessionEnded(stopApp) # Stop the app when closed
#Productivity Score by Gender
output$plot_productivity <- renderPlot({
sleeping %>%
filter(gender != "Other") %>%
filter(total_sleep_hours >= as.numeric(input$sleep_filter) - 0.25 &
total_sleep_hours <= as.numeric(input$sleep_filter) + 0.25) %>%  # Noise range ±0.25
ggplot(aes(x = productivity_score, fill = gender)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("#e74c3c", "#3498db")) +
labs(title = paste("Productivity Score Density (Sleep:", input$sleep_filter, "±0.25 hrs)"),
x = "Productivity Score",
y = "Density") +
theme_minimal()
})
#Stress Level by Gender
output$plot_stress <- renderPlot({
sleeping %>%
filter(gender != "Other") %>%
filter(total_sleep_hours >= as.numeric(input$sleep_filter) - 0.25 &
total_sleep_hours <= as.numeric(input$sleep_filter) + 0.25) %>%  # Noise range ±0.25
ggplot(aes(x = stress_level, fill = gender)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("#2ecc71", "#9b59b6")) +
labs(title = "Stress Level Density by Gender",
x = "Stress Level",
y = "Density") +
theme_minimal()
})
}
# Run the Shiny App
shinyApp(ui, server)
plot_productivity <- sleeping %>%
filter(gender != "Other") %>%
filter(total_sleep_hours >= 6.75 & total_sleep_hours <= 7.25) %>%
ggplot(aes(x = productivity_score, fill = gender)) +
geom_density(alpha=0.5) +
labs(title = "Productivity Score Density",
x = "Productivity Score",
y = "Density")
ggsave("productivity_score_density.png", plot = plot_productivity, width = 8, height = 5, dpi = 300)
plot_stress <- sleeping %>%
filter(gender != "Other") %>%
filter(total_sleep_hours >= 6.75 & total_sleep_hours <= 7.25) %>%
ggplot(aes(x = stress_level, fill = gender)) +
geom_density(alpha=0.5) +
labs(title = "Productivity Score Density",
x = "Productivity Score",
y = "Stress")
ggsave("stress_level_density.png", plot = plot_stress, width = 8, height = 5, dpi = 300)
sleeping %>%
filter(gender != "Other"
sleeping %>%
plot_productivity <- sleeping %>%
filter(gender != "Other")
plot_productivity <- sleeping %>%
filter(gender != "Other") %>%
filter(total_sleep_hours >= 6.75 & total_sleep_hours <= 7.25)
View(plot_productivity)
ui <- navbarPage("Multi-App Dashboard",
tabPanel("Caffeine & Sleep",
fluidPage(
titlePanel("Caffeine Intake vs Sleep Start Time"),
sidebarLayout(
sidebarPanel(
selectInput("gender", "Select Gender", choices=c("Female", "Male"), selected="Female"),
numericInput("age", "Select Age", value = 25, min = 18, max = 60)
),
mainPanel(
plotOutput("caffeine_sleep_plot")
)
)
)
),
tabPanel("Sleep & Productivity",
fluidPage(
titlePanel("Sleep Quality vs Productivity & Stress"),
sidebarLayout(
sidebarPanel(
sliderInput("sleep_filter", "Filter by Total Sleep Hours:", min = 4, max = 10, value = 6, step = 0.5)
),
mainPanel(
fluidRow(
column(6, plotOutput("plot_productivity")),
column(6, plotOutput("plot_stress"))
)
)
)
)
),
tabPanel("Sleep Quality vs Mood",
fluidPage(
titlePanel("Sleep Quality vs. Mood Score Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("x", "Select X Variable", choices = c("sleep_quality", "mood_score"), selected = "sleep_quality"),
selectInput("y", "Select Y Variable", choices = c("sleep_quality", "mood_score"), selected = "mood_score"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
checkboxInput("show_line", "Show Regression Line", value = TRUE)
),
mainPanel(
plotOutput("scatterPlot")
)
)
)
),
tabPanel("Stress vs Caffeine & Screen Time",
fluidPage(
titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:", choices = sort(unique(sleep$age)), selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
)
)
# Define Server
server <- function(input, output) {
# Caffeine & Sleep Plot
output$caffeine_sleep_plot <- renderPlot({
sleep %>%
filter(gender == input$gender, age == input$age) %>%
ggplot(aes(x = caffeine_intake_mg, y = sleep_start_time)) +
geom_point(alpha=0.8, color="skyblue") +
geom_smooth(method="lm", color="red") +
labs(x = "Caffeine Intake (mg)", y = "Sleep Start Time", title = "Caffeine vs Sleep")
})
# Sleep Productivity & Stress Plots
output$plot_productivity <- renderPlot({
sleep %>%
filter(gender !="Other") %>%
filter(total_sleep_hours >= input$sleep_filter - 0.25 & total_sleep_hours <= input$sleep_filter + 0.25) %>%
ggplot(aes(x = productivity_score, fill = gender)) +
geom_density(alpha = 0.5) +
theme_minimal()
})
output$plot_stress <- renderPlot({
sleep %>%
filter(gender !="Other") %>%
filter(total_sleep_hours >= input$sleep_filter - 0.25 & total_sleep_hours <= input$sleep_filter + 0.25) %>%
ggplot(aes(x = stress_level, fill = gender)) +
geom_density(alpha = 0.5) +
theme_minimal()
})
# Sleep Quality vs Mood Scatterplot
output$scatterPlot <- renderPlot({
p <- ggplot(sleep, aes_string(x = input$x, y = input$y)) +
geom_point(size = input$pointsize, color = "blue", alpha = 0.6) +
theme_minimal()
if (input$show_line) {
p <- p + geom_smooth(method = "lm", color = "red")
}
p
})
# Caffeine vs Stress & Screen Time vs Stress
output$caffeine_plot <- renderPlot({
ggplot(sleep %>% filter(age == input$age), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", color = "red") +
theme_minimal()
})
output$screen_time_plot <- renderPlot({
ggplot(sleep %>% filter(age == input$age), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", color = "red") +
theme_minimal()
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
ui <- dashboardPage(
dashboardHeader(title = "Multi-App Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Caffeine & Sleep", tabName = "caffeine_sleep", icon = icon("coffee")),
menuItem("Sleep & Productivity", tabName = "sleep_productivity", icon = icon("chart-line")),
menuItem("Sleep Quality vs Mood", tabName = "sleep_mood", icon = icon("smile")),
menuItem("Stress vs Caffeine & Screen Time", tabName = "stress_analysis", icon = icon("heartbeat"))
)
),
dashboardBody(
tags$head(tags$style(HTML(".content-wrapper { background-color: #f7f7f7 !important; }"))),
tabItems(
tabItem(tabName = "caffeine_sleep",
fluidPage(
h2("Caffeine Intake vs Sleep Start Time", style = "color: #2c3e50;"),
sidebarLayout(
sidebarPanel(
selectInput("gender", "Select Gender", choices = c("Female", "Male"), selected = "Female"),
numericInput("age", "Select Age", value = 25, min = 18, max = 60)
),
mainPanel(plotOutput("caffeine_sleep_plot"))
)
)
),
tabItem(tabName = "sleep_productivity",
fluidPage(
h2("Sleep Quality vs Productivity & Stress", style = "color: #3498db;"),
sidebarLayout(
sidebarPanel(
sliderInput("sleep_filter", "Filter by Total Sleep Hours:", min = 4, max = 10, value = 6, step = 0.5)
),
mainPanel(
fluidRow(
column(6, plotOutput("plot_productivity")),
column(6, plotOutput("plot_stress"))
)
)
)
)
),
tabItem(tabName = "sleep_mood",
fluidPage(
h2("Sleep Quality vs. Mood Score Analysis", style = "color: #e67e22;"),
sidebarLayout(
sidebarPanel(
selectInput("x", "Select X Variable", choices = c("sleep_quality", "mood_score"), selected = "sleep_quality"),
selectInput("y", "Select Y Variable", choices = c("sleep_quality", "mood_score"), selected = "mood_score"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
checkboxInput("show_line", "Show Regression Line", value = TRUE)
),
mainPanel(plotOutput("scatterPlot"))
)
)
),
tabItem(tabName = "stress_analysis",
fluidPage(
h2("Stress, Caffeine, and Screen Time Analysis", style = "color: #c0392b;"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:", choices = sort(unique(sleep$age)), selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
)
)
)
)
server <- function(input, output) {
output$caffeine_sleep_plot <- renderPlot({
sleep %>%
filter(gender == input$gender, age == input$age) %>%
ggplot(aes(x = caffeine_intake_mg, y = sleep_start_time)) +
geom_point(alpha = 0.8, color = "#1abc9c") +
geom_smooth(method = "lm", color = "#e74c3c") +
labs(x = "Caffeine Intake (mg)", y = "Sleep Start Time", title = "Caffeine vs Sleep")
})
output$plot_productivity <- renderPlot({
sleep %>%
filter(gender != "Other") %>%
filter(total_sleep_hours >= input$sleep_filter - 0.25 & total_sleep_hours <= input$sleep_filter + 0.25) %>%
ggplot(aes(x = productivity_score, fill = gender)) +
geom_density(alpha = 0.5) +
theme_minimal()
})
output$plot_stress <- renderPlot({
sleep %>%
filter(gender != "Other") %>%
filter(total_sleep_hours >= input$sleep_filter - 0.25 & total_sleep_hours <= input$sleep_filter + 0.25) %>%
ggplot(aes(x = stress_level, fill = gender)) +
geom_density(alpha = 0.5) +
theme_minimal()
})
output$scatterPlot <- renderPlot({
p <- ggplot(sleep, aes_string(x = input$x, y = input$y)) +
geom_point(size = input$pointsize, color = "#2980b9", alpha = 0.6) +
theme_minimal()
if (input$show_line) {
p <- p + geom_smooth(method = "lm", color = "#e74c3c")
}
p
})
output$caffeine_plot <- renderPlot({
ggplot(sleep %>% filter(age == input$age), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "#8e44ad") +
geom_smooth(method = "lm", color = "#e74c3c") +
theme_minimal()
})
output$screen_time_plot <- renderPlot({
ggplot(sleep %>% filter(age == input$age), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "#27ae60") +
geom_smooth(method = "lm", color = "#e74c3c") +
theme_minimal()
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
ui <- dashboardPage(
dashboardHeader(title = "✨ Multi-App Dashboard ✨"),
dashboardSidebar(
sidebarMenu(
menuItem("☕ Caffeine & Sleep", tabName = "caffeine_sleep", icon = icon("coffee")),
menuItem("💤 Sleep & Productivity", tabName = "sleep_productivity", icon = icon("chart-line")),
menuItem("😊 Sleep Quality vs Mood", tabName = "sleep_mood", icon = icon("smile")),
menuItem("💖 Stress vs Caffeine & Screen Time", tabName = "stress_analysis", icon = icon("heartbeat"))
)
),
dashboardBody(
tags$head(
tags$style(HTML(".content-wrapper { background-color: #f0f0f5 !important; }")),
tags$style(HTML(".main-header .logo { font-weight: bold; color: #ffffff !important; background: linear-gradient(45deg, #ff9a9e, #fad0c4) !important; }"))
),
tabItems(
tabItem(tabName = "caffeine_sleep",
fluidPage(
tags$img(src='https://media.giphy.com/media/xT9IgG50Fb7Mi0prBC/giphy.gif', width='100%'),
h2("Caffeine Intake vs Sleep Start Time", style = "color: #2c3e50;"),
sidebarLayout(
sidebarPanel(
selectInput("gender", "Select Gender", choices = c("Female", "Male"), selected = "Female"),
numericInput("age", "Select Age", value = 25, min = 18, max = 60)
),
mainPanel(plotOutput("caffeine_sleep_plot"))
)
)
),
tabItem(tabName = "sleep_productivity",
fluidPage(
h2("Sleep Quality vs Productivity & Stress", style = "color: #3498db;"),
sidebarLayout(
sidebarPanel(
sliderInput("sleep_filter", "Filter by Total Sleep Hours:", min = 4, max = 10, value = 6, step = 0.5)
),
mainPanel(
fluidRow(
column(6, plotOutput("plot_productivity")),
column(6, plotOutput("plot_stress"))
)
)
)
)
),
tabItem(tabName = "sleep_mood",
fluidPage(
h2("Sleep Quality vs. Mood Score Analysis", style = "color: #e67e22;"),
sidebarLayout(
sidebarPanel(
selectInput("x", "Select X Variable", choices = c("sleep_quality", "mood_score"), selected = "sleep_quality"),
selectInput("y", "Select Y Variable", choices = c("sleep_quality", "mood_score"), selected = "mood_score"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
checkboxInput("show_line", "Show Regression Line", value = TRUE)
),
mainPanel(
tags$img(src='https://media.giphy.com/media/3o7abKhOpu0NwenH3O/giphy.gif', width='100%'),
plotOutput("scatterPlot")
)
)
)
),
tabItem(tabName = "stress_analysis",
fluidPage(
h2("Stress, Caffeine, and Screen Time Analysis", style = "color: #c0392b;"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:", choices = sort(unique(sleep$age)), selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
)
)
)
)
server <- function(input, output) {
output$caffeine_sleep_plot <- renderPlot({
sleep %>%
filter(gender == input$gender, age == input$age) %>%
ggplot(aes(x = caffeine_intake_mg, y = sleep_start_time)) +
geom_point(alpha = 0.8, color = "#1abc9c") +
geom_smooth(method = "lm", color = "#e74c3c") +
labs(x = "Caffeine Intake (mg)", y = "Sleep Start Time", title = "Caffeine vs Sleep")
})
output$plot_productivity <- renderPlot({
sleep %>%
filter(gender != "Other") %>%
filter(total_sleep_hours >= input$sleep_filter - 0.25 & total_sleep_hours <= input$sleep_filter + 0.25) %>%
ggplot(aes(x = productivity_score, fill = gender)) +
geom_density(alpha = 0.5) +
theme_minimal()
})
output$plot_stress <- renderPlot({
sleep %>%
filter(gender != "Other") %>%
filter(total_sleep_hours >= input$sleep_filter - 0.25 & total_sleep_hours <= input$sleep_filter + 0.25) %>%
ggplot(aes(x = stress_level, fill = gender)) +
geom_density(alpha = 0.5) +
theme_minimal()
})
output$scatterPlot <- renderPlot({
p <- ggplot(sleep, aes_string(x = input$x, y = input$y)) +
geom_point(size = input$pointsize, color = "#2980b9", alpha = 0.6) +
theme_minimal()
if (input$show_line) {
p <- p + geom_smooth(method = "lm", color = "#e74c3c")
}
p
})
}
shinyApp(ui, server)
