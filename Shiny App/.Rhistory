)
# Server
server <- function(input, output) {
observeEvent(input$show_dist, {
req(input$user_gender, input$user_mood)
sleep2 <- df %>%
filter(Gender %in% c("Male", "Female")) %>%
select(Mood.Score, Sleep.Quality, Gender)
filtered_data <- sleep2 %>%
filter(Gender == input$user_gender, Mood.Score == input$user_mood)
if (nrow(filtered_data) > 0) {
median_quality <- median(filtered_data$Sleep.Quality, na.rm = TRUE)
q1 <- quantile(filtered_data$Sleep.Quality, 0.25, na.rm = TRUE)
q3 <- quantile(filtered_data$Sleep.Quality, 0.75, na.rm = TRUE)
mode_quality <- filtered_data$Sleep.Quality %>%
table() %>%
which.max() %>%
names() %>%
as.numeric()
output$boxplot_sleep <- renderPlot({
ggplot(filtered_data, aes(x = as.factor(Mood.Score), y = Sleep.Quality, fill = Gender)) +
geom_boxplot(alpha = 0.6) +
labs(title = paste("Sleep Quality Distribution for Mood Score", input$user_mood),
x = "Mood Score",
y = "Sleep Quality") +
theme_minimal()
})
output$density_sleep <- renderPlot({
ggplot(filtered_data, aes(x = Sleep.Quality, fill = Gender)) +
geom_density(alpha = 0.5) +
labs(title = paste("Density Plot of Sleep Quality for Mood Score", input$user_mood),
x = "Sleep Quality",
y = "Density") +
theme_minimal()
})
output$boxplot_interpretation <- renderUI({
HTML(paste(
"<b>For mood score", input$user_mood, ":</b>",
"<br>📊 About <b>50%</b> of people have a sleep quality between <b>", q1, "and", q3, "</b>.",
"<br>🛌 The <b>median sleep quality</b> is <b>", median_quality, "</b>, meaning half the people sleep better and half sleep worse."
))
})
output$density_interpretation <- renderUI({
HTML(paste(
"<b>The most common sleep quality</b> for mood score", input$user_mood, "is around <b>", mode_quality, "</b>.",
"<br>This means that most people with this mood score experience sleep quality near this value."
))
})
} else {
output$boxplot_sleep <- renderPlot({})
output$density_sleep <- renderPlot({})
output$boxplot_interpretation <- renderUI(HTML("<b>No matching data found.</b> Try another mood score."))
output$density_interpretation <- renderUI(HTML("<b>No density distribution available.</b> Try another mood score."))
}
})
df <- read.csv("sleep_cycle_productivity.csv", check.names = TRUE)
filtered_df <- reactive({
data <- df[df$Age >= input$ageRange[1] & df$Age <= input$ageRange[2], ]
if (input$gender != "All") {
data <- data[data$Gender == input$gender, ]
}
return(data)
})
output$scatterPlot <- renderPlot({
if (input$xvar %in% c("Age", "Mood.Score", "Stress.Level", "Sleep.Quality", "Productivity.Score")) {
showNotification("⚠️ Warning: The selected X-axis variable is categorical and may not be suitable for a scatter plot!", type = "error", duration = 5)
}
if (input$yvar %in% c("Age", "Mood.Score", "Stress.Level", "Sleep.Quality", "Productivity.Score")) {
showNotification("⚠️ Warning: The selected Y-axis variable is categorical and may not be suitable for a scatter plot!", type = "error", duration = 5)
}
plot_title <- paste('Scatter Plot:', input$xvar, 'vs', input$yvar)
ggplot(filtered_df(), aes(x = !!sym(input$xvar), y = !!sym(input$yvar))) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
theme_minimal() +
labs(title = plot_title, x = input$xvar, y = input$yvar)
})
output$boxPlot <- renderPlot({
if (input$xvar %in% c("Caffeine.Intake..mg.", "Screen.Time.Before.Bed..mins.", "Total.Sleep.Hours", "Exercise..mins.day.")) {
showNotification("⚠️ Warning: The selected X-axis variable is numeric and may not be suitable for a boxplot!", type = "error", duration = 5)
}
plot_title <- paste('Boxplot of', input$xvar, 'vs Total Sleep Hours')
ggplot(filtered_df(), aes(x = as.factor(!!sym(input$xvar)), y = !!sym("Total.Sleep.Hours"))) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
theme_minimal() +
labs(title = plot_title, x = input$xvar, y = 'Total Sleep Hours')
})
output$densityPlot <- renderPlot({
if (!is.null(input$yvar)) {
showNotification("⚠️ Warning: The density plot does not require a Y-axis variable!", type = "error", duration = 5)
}
plot_title <- paste('Density Plot of', input$xvar)
ggplot(filtered_df(), aes(x = !!sym(input$xvar), fill = ..density..)) +
geom_density(alpha = 0.6, color = "darkblue", fill = "lightblue") +
theme_minimal() +
labs(title = plot_title, x = input$xvar, y = 'Density')
})
output$histogramPlot <- renderPlot({
if (input$xvar %in% c("Caffeine.Intake..mg.", "Screen.Time.Before.Bed..mins.", "Total.Sleep.Hours", "Exercise..mins.day.")) {
showNotification("⚠️ Warning: The selected X-axis variable is numeric and may not be suitable for a histogram!", type = "error", duration = 5)
}
plot_title <- paste('Histogram of', input$xvar)
ggplot(filtered_df(), aes(x = as.factor(!!sym(input$xvar)))) +
geom_bar(fill = "lightblue") +
theme_minimal() +
labs(title = plot_title, x = input$xvar, y = 'Count')
})
output$columnPlot <- renderPlot({
if (input$xvar %in% c("Caffeine.Intake..mg.", "Screen.Time.Before.Bed..mins.", "Total.Sleep.Hours", "Exercise..mins.day.")) {
showNotification("⚠️ Warning: The selected X-axis variable is numeric and may not be suitable for a column plot!", type = "error", duration = 5)
}
plot_title <- paste('Column Plot of', input$xvar, 'vs', input$yvar)
ggplot(filtered_df(), aes(x = as.factor(!!sym(input$xvar)), y = !!sym(input$yvar), fill = as.factor(!!sym(input$xvar)))) +
geom_col() +
theme_minimal() +
labs(title = plot_title, x = input$xvar, y = input$yvar)
})
}
# Run the app
shinyApp(ui, server)
library(tidyverse)
require(janitor)
sleep <- read_csv("~/Desktop/BIS15W2025_group7/Lu's Folder (#3)/sleep_cycle_productivity.csv") %>%
clean_names()
sleep2 <- sleep %>%
filter(gender=="Female" | gender=="Male") %>%
select(mood_score, sleep_quality, gender)
library(shiny)
library(ggplot2)
library(shinydashboard)
library(reshape2)
library(rlang)
library(RColorBrewer)
library(shinythemes)
library(shinycssloaders)
# UI
ui <- dashboardPage(
dashboardHeader(title = HTML("<b>Sleep</b>")),
dashboardSidebar(
sidebarMenu(
menuItem("Scatter Plot", tabName = "scatter", icon = icon("braille")),
menuItem("Boxplot", tabName = "boxplot", icon = icon("box")),
menuItem("Density Plot", tabName = "density", icon = icon("chart-area")),
menuItem("Histogram", tabName = "histogram", icon = icon("chart-bar")),
menuItem("Column Plot", tabName = "columnplot", icon = icon("bar-chart")),
menuItem("Sleep Quality Analysis", tabName = "sleep_analysis", icon = icon("chart-line"))
),
selectInput("xvar", "Select X-axis Variable (Numeric | Categorical):",
choices = list(
"Numeric Variables" = c("Caffeine.Intake..mg.", "Screen.Time.Before.Bed..mins.", "Total.Sleep.Hours", "Exercise..mins.day."),
"Categorical Variables" = c("Age", "Mood.Score", "Stress.Level", "Sleep.Quality", "Productivity.Score")
)),
selectInput("yvar", "Select Y-axis Variable (Numeric | Categorical):",
choices = list(
"Numeric Variables" = c("Total.Sleep.Hours", "Caffeine.Intake..mg.", "Screen.Time.Before.Bed..mins.", "Exercise..mins.day."),
"Categorical Variables" = c("Age", "Mood.Score", "Stress.Level", "Sleep.Quality", "Productivity.Score")
)),
sliderInput("ageRange", "Select Age Range:", min = 18, max = 80, value = c(18, 80)),
selectInput("gender", "Select Gender:", choices = c("All", "Male", "Female", "Other"), selected = "All")
),
dashboardBody(
tags$head(
tags$style(HTML("body { background-color: #B7C3D0; }
.shiny-notification {
font-size: 18px;
font-weight: bold;
color: white;
background-color: #FF6B6B;
border: 2px solid #D32F2F;
padding: 15px;
text-align: center;
}"))
),
tabItems(
tabItem(tabName = "sleep_analysis",
sidebarLayout(
sidebarPanel(
h3("Your Data Input"),
selectInput("user_gender", "Select Your Gender:", choices = c("Male", "Female")),
numericInput("user_mood", "Enter Your Mood Score (1-10):", value = 5, min = 1, max = 10),
actionButton("show_dist", "Show Sleep Quality Distribution"),
hr()
),
mainPanel(
tabsetPanel(
tabPanel("Sleep Quality Distribution",
plotOutput("boxplot_sleep", height = "400px"),
htmlOutput("boxplot_interpretation"),
tags$br(),
plotOutput("density_sleep", height = "400px"),
htmlOutput("density_interpretation")
)
)
)
)
),
tabItem(tabName = "scatter", fluidRow(box(withSpinner(plotOutput("scatterPlot")), width = 12))),
tabItem(tabName = "boxplot", fluidRow(box(withSpinner(plotOutput("boxPlot")), width = 12))),
tabItem(tabName = "density", fluidRow(box(withSpinner(plotOutput("densityPlot")), width = 12))),
tabItem(tabName = "histogram", fluidRow(box(withSpinner(plotOutput("histogramPlot")), width = 12))),
tabItem(tabName = "columnplot", fluidRow(box(withSpinner(plotOutput("columnPlot")), width = 12)))
)
)
)
# Server
server <- function(input, output) {
observeEvent(input$show_dist, {
req(input$user_gender, input$user_mood)
sleep2 <- df %>%
filter(Gender %in% c("Male", "Female")) %>%
select(Mood.Score, Sleep.Quality, Gender)
filtered_data <- sleep2 %>%
filter(Gender == input$user_gender, Mood.Score == input$user_mood)
if (nrow(filtered_data) > 0) {
median_quality <- median(filtered_data$Sleep.Quality, na.rm = TRUE)
q1 <- quantile(filtered_data$Sleep.Quality, 0.25, na.rm = TRUE)
q3 <- quantile(filtered_data$Sleep.Quality, 0.75, na.rm = TRUE)
mode_quality <- filtered_data$Sleep.Quality %>%
table() %>%
which.max() %>%
names() %>%
as.numeric()
output$boxplot_sleep <- renderPlot({
ggplot(filtered_data, aes(x = as.factor(Mood.Score), y = Sleep.Quality, fill = Gender)) +
geom_boxplot(alpha = 0.6) +
labs(title = paste("Sleep Quality Distribution for Mood Score", input$user_mood),
x = "Mood Score",
y = "Sleep Quality") +
theme_minimal()
})
output$density_sleep <- renderPlot({
ggplot(filtered_data, aes(x = Sleep.Quality, fill = Gender)) +
geom_density(alpha = 0.5) +
labs(title = paste("Density Plot of Sleep Quality for Mood Score", input$user_mood),
x = "Sleep Quality",
y = "Density") +
theme_minimal()
})
output$boxplot_interpretation <- renderUI({
HTML(paste(
"<b>For mood score", input$user_mood, ":</b>",
"<br>📊 About <b>50%</b> of people have a sleep quality between <b>", q1, "and", q3, "</b>.",
"<br>🛌 The <b>median sleep quality</b> is <b>", median_quality, "</b>, meaning half the people sleep better and half sleep worse."
))
})
output$density_interpretation <- renderUI({
HTML(paste(
"<b>The most common sleep quality</b> for mood score", input$user_mood, "is around <b>", mode_quality, "</b>.",
"<br>This means that most people with this mood score experience sleep quality near this value."
))
})
} else {
output$boxplot_sleep <- renderPlot({})
output$density_sleep <- renderPlot({})
output$boxplot_interpretation <- renderUI(HTML("<b>No matching data found.</b> Try another mood score."))
output$density_interpretation <- renderUI(HTML("<b>No density distribution available.</b> Try another mood score."))
}
})
df <- read.csv("sleep_cycle_productivity.csv", check.names = TRUE)
filtered_df <- reactive({
data <- df[df$Age >= input$ageRange[1] & df$Age <= input$ageRange[2], ]
if (input$gender != "All") {
data <- data[data$Gender == input$gender, ]
}
return(data)
})
output$scatterPlot <- renderPlot({
if (input$xvar %in% c("Age", "Mood.Score", "Stress.Level", "Sleep.Quality", "Productivity.Score")) {
showNotification("⚠️ Warning: The selected X-axis variable is categorical and may not be suitable for a scatter plot!", type = "error", duration = 5)
}
if (input$yvar %in% c("Age", "Mood.Score", "Stress.Level", "Sleep.Quality", "Productivity.Score")) {
showNotification("⚠️ Warning: The selected Y-axis variable is categorical and may not be suitable for a scatter plot!", type = "error", duration = 5)
}
plot_title <- paste('Scatter Plot:', input$xvar, 'vs', input$yvar)
ggplot(filtered_df(), aes(x = !!sym(input$xvar), y = !!sym(input$yvar))) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
theme_minimal() +
labs(title = plot_title, x = input$xvar, y = input$yvar)
})
output$boxPlot <- renderPlot({
if (input$xvar %in% c("Caffeine.Intake..mg.", "Screen.Time.Before.Bed..mins.", "Total.Sleep.Hours", "Exercise..mins.day.")) {
showNotification("⚠️ Warning: The selected X-axis variable is numeric and may not be suitable for a boxplot!", type = "error", duration = 5)
}
plot_title <- paste('Boxplot of', input$xvar, 'vs Total Sleep Hours')
ggplot(filtered_df(), aes(x = as.factor(!!sym(input$xvar)), y = !!sym("Total.Sleep.Hours"))) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
theme_minimal() +
labs(title = plot_title, x = input$xvar, y = 'Total Sleep Hours')
})
output$densityPlot <- renderPlot({
if (!is.null(input$yvar)) {
showNotification("⚠️ Warning: The density plot does not require a Y-axis variable!", type = "error", duration = 5)
}
plot_title <- paste('Density Plot of', input$xvar)
ggplot(filtered_df(), aes(x = !!sym(input$xvar), fill = ..density..)) +
geom_density(alpha = 0.6, color = "darkblue", fill = "lightblue") +
theme_minimal() +
labs(title = plot_title, x = input$xvar, y = 'Density')
})
output$histogramPlot <- renderPlot({
if (input$xvar %in% c("Caffeine.Intake..mg.", "Screen.Time.Before.Bed..mins.", "Total.Sleep.Hours", "Exercise..mins.day.")) {
showNotification("⚠️ Warning: The selected X-axis variable is numeric and may not be suitable for a histogram!", type = "error", duration = 5)
}
plot_title <- paste('Histogram of', input$xvar)
ggplot(filtered_df(), aes(x = as.factor(!!sym(input$xvar)))) +
geom_bar(fill = "lightblue") +
theme_minimal() +
labs(title = plot_title, x = input$xvar, y = 'Count')
})
output$columnPlot <- renderPlot({
if (input$xvar %in% c("Caffeine.Intake..mg.", "Screen.Time.Before.Bed..mins.", "Total.Sleep.Hours", "Exercise..mins.day.")) {
showNotification("⚠️ Warning: The selected X-axis variable is numeric and may not be suitable for a column plot!", type = "error", duration = 5)
}
plot_title <- paste('Column Plot of', input$xvar, 'vs', input$yvar)
ggplot(filtered_df(), aes(x = as.factor(!!sym(input$xvar)), y = !!sym(input$yvar), fill = as.factor(!!sym(input$xvar)))) +
geom_col() +
theme_minimal() +
labs(title = plot_title, x = input$xvar, y = input$yvar)
})
}
# Run the app
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
ui <- navbarPage("Multi-App Dashboard",
tabPanel("Caffeine & Sleep",
fluidPage(
titlePanel("Caffeine Intake vs Sleep Start Time"),
sidebarLayout(
sidebarPanel(
selectInput("gender", "Select Gender", choices=c("Female", "Male"), selected="Female"),
numericInput("age", "Select Age", value = 25, min = 18, max = 60)
),
mainPanel(
plotOutput("caffeine_sleep_plot")
)
)
)
),
tabPanel("Sleep & Productivity",
fluidPage(
titlePanel("Sleep Quality vs Productivity & Stress"),
sidebarLayout(
sidebarPanel(
sliderInput("sleep_filter", "Filter by Total Sleep Hours:", min = 4, max = 10, value = 6, step = 0.5)
),
mainPanel(
fluidRow(
column(6, plotOutput("plot_productivity")),
column(6, plotOutput("plot_stress"))
)
)
)
)
),
tabPanel("Sleep Quality vs Mood",
fluidPage(
titlePanel("Sleep Quality vs. Mood Score Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("x", "Select X Variable", choices = c("sleep_quality", "mood_score"), selected = "sleep_quality"),
selectInput("y", "Select Y Variable", choices = c("sleep_quality", "mood_score"), selected = "mood_score"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
checkboxInput("show_line", "Show Regression Line", value = TRUE)
),
mainPanel(
plotOutput("scatterPlot")
)
)
)
),
tabPanel("Stress vs Caffeine & Screen Time",
fluidPage(
titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:", choices = sort(unique(sleep$age)), selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
)
)
colnames(sleep) <- c("date", "person_id", "age", "gender", "sleep_start_time", "sleep_end_time",
"total_sleep_hours", "sleep_quality", "exercise_mins_per_day", "caffeine_intake_mg",
"screen_time_before_bed_mins", "work_hours_per_day", "productivity_score", "mood_score", "stress_level")
library(shiny)
library(ggplot2)
library(dplyr)
library(readr)
ui <- navbarPage("Multi-App Dashboard",
tabPanel("Caffeine & Sleep",
fluidPage(
titlePanel("Caffeine Intake vs Sleep Start Time"),
sidebarLayout(
sidebarPanel(
selectInput("gender", "Select Gender", choices=c("Female", "Male"), selected="Female"),
numericInput("age", "Select Age", value = 25, min = 18, max = 60)
),
mainPanel(
plotOutput("caffeine_sleep_plot")
)
)
)
),
tabPanel("Sleep & Productivity",
fluidPage(
titlePanel("Sleep Quality vs Productivity & Stress"),
sidebarLayout(
sidebarPanel(
sliderInput("sleep_filter", "Filter by Total Sleep Hours:", min = 4, max = 10, value = 6, step = 0.5)
),
mainPanel(
fluidRow(
column(6, plotOutput("plot_productivity")),
column(6, plotOutput("plot_stress"))
)
)
)
)
),
tabPanel("Sleep Quality vs Mood",
fluidPage(
titlePanel("Sleep Quality vs. Mood Score Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("x", "Select X Variable", choices = c("sleep_quality", "mood_score"), selected = "sleep_quality"),
selectInput("y", "Select Y Variable", choices = c("sleep_quality", "mood_score"), selected = "mood_score"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
checkboxInput("show_line", "Show Regression Line", value = TRUE)
),
mainPanel(
plotOutput("scatterPlot")
)
)
)
),
tabPanel("Stress vs Caffeine & Screen Time",
fluidPage(
titlePanel("Stress, Caffeine, and Screen Time Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("age", "Select Age:", choices = sort(unique(sleep$age)), selected = "18")
),
mainPanel(
tabsetPanel(
tabPanel("Caffeine vs Stress", plotOutput("caffeine_plot")),
tabPanel("Screen Time vs Stress", plotOutput("screen_time_plot"))
)
)
)
)
)
)
# Define Server
server <- function(input, output) {
# Caffeine & Sleep Plot
output$caffeine_sleep_plot <- renderPlot({
sleep %>%
filter(gender == input$gender, age == input$age) %>%
ggplot(aes(x = caffeine_intake_mg, y = sleep_start_time)) +
geom_point(alpha=0.8, color="skyblue") +
geom_smooth(method="lm", color="red") +
labs(x = "Caffeine Intake (mg)", y = "Sleep Start Time", title = "Caffeine vs Sleep")
})
# Sleep Productivity & Stress Plots
output$plot_productivity <- renderPlot({
sleep %>%
filter(gender !="Other") %>%
filter(total_sleep_hours >= input$sleep_filter - 0.25 & total_sleep_hours <= input$sleep_filter + 0.25) %>%
ggplot(aes(x = productivity_score, fill = gender)) +
geom_density(alpha = 0.5) +
theme_minimal()
})
output$plot_stress <- renderPlot({
sleep %>%
filter(gender !="Other") %>%
filter(total_sleep_hours >= input$sleep_filter - 0.25 & total_sleep_hours <= input$sleep_filter + 0.25) %>%
ggplot(aes(x = stress_level, fill = gender)) +
geom_density(alpha = 0.5) +
theme_minimal()
})
# Sleep Quality vs Mood Scatterplot
output$scatterPlot <- renderPlot({
p <- ggplot(sleep, aes_string(x = input$x, y = input$y)) +
geom_point(size = input$pointsize, color = "blue", alpha = 0.6) +
theme_minimal()
if (input$show_line) {
p <- p + geom_smooth(method = "lm", color = "red")
}
p
})
# Caffeine vs Stress & Screen Time vs Stress
output$caffeine_plot <- renderPlot({
ggplot(sleep %>% filter(age == input$age), aes(x = caffeine_intake_mg, y = stress_level)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", color = "red") +
theme_minimal()
})
output$screen_time_plot <- renderPlot({
ggplot(sleep %>% filter(age == input$age), aes(x = screen_time_before_bed_mins, y = stress_level)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_smooth(method = "lm", color = "red") +
theme_minimal()
})
}
shinyApp(ui, server)
