choices = c("sleep_quality", "mood_score"),
selected = "sleep_quality"),
# 选择 Y 变量
selectInput("y",
"Select Y Variable",
choices = c("sleep_quality", "mood_score"),
selected = "mood_score"),
# 控制点的大小
sliderInput("pointsize", "Select the Point Size",
min = 1, max = 5, value = 2, step = 0.5),
# 添加回归线选项
checkboxInput("show_line", "Show Regression Line", value = TRUE)
),
mainPanel(
plotOutput("scatterPlot")  # 显示散点图
)
)
)
# 服务器端逻辑
server <- function(input, output, session) {
session$onSessionEnded(stopApp)  # 自动停止 Shiny
output$scatterPlot <- renderPlot({
req(sleep)  # 确保数据存在
# 创建基础散点图
p <- ggplot(sleep, aes_string(x = input$x, y = input$y)) +
geom_point(size = input$pointsize, color = "blue", alpha = 0.6) +
labs(title = paste("Scatterplot of", input$x, "vs", input$y),
x = input$x,
y = input$y) +
theme_minimal(base_size = 14)
# 如果用户勾选了回归线，添加线性拟合
if (input$show_line) {
p <- p + geom_smooth(method = "lm", se = TRUE, color = "red")
}
p
})
}
# 运行 Shiny App
shinyApp(ui = ui, server = server)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(ggplot2)
library(dplyr)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
# UI 部分
ui <- fluidPage(
titlePanel("Sleep Quality vs. Mood Score Analysis"),
sidebarLayout(
sidebarPanel(
# 选择 X 变量
selectInput("x",
"Select X Variable",
choices = c("sleep_quality", "mood_score"),
selected = "sleep_quality"),
# 选择 Y 变量
selectInput("y",
"Select Y Variable",
choices = c("sleep_quality", "mood_score"),
selected = "mood_score"),
# 控制点的大小
sliderInput("pointsize", "Select the Point Size",
min = 1, max = 5, value = 2, step = 0.5),
# 添加回归线选项
checkboxInput("show_line", "Show Regression Line", value = TRUE)
),
mainPanel(
plotOutput("scatterPlot")  # 显示散点图
)
)
)
# 服务器端逻辑
server <- function(input, output, session) {
session$onSessionEnded(stopApp)  # 自动停止 Shiny
output$scatterPlot <- renderPlot({
req(sleep)  # 确保数据存在
# 创建基础散点图
p <- ggplot(sleep, aes_string(x = input$x, y = input$y)) +
geom_point(size = input$pointsize, color = "blue", alpha = 0.6) +
labs(title = paste("Scatterplot of", input$x, "vs", input$y),
x = input$x,
y = input$y) +
theme_minimal(base_size = 14)
# 如果用户勾选了回归线，添加线性拟合
if (input$show_line) {
p <- p + geom_smooth(method = "lm", se = TRUE, color = "red")
}
p
})
}
# 运行 Shiny App
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
# UI 部分
ui <- fluidPage(
titlePanel("Sleep Quality vs. Mood Score Analysis"),
sidebarLayout(
sidebarPanel(
# 选择 X 变量
selectInput("x",
"Select X Variable",
choices = c("sleep_quality", "mood_score"),
selected = "sleep_quality"),
# 选择 Y 变量
selectInput("y",
"Select Y Variable",
choices = c("sleep_quality", "mood_score"),
selected = "mood_score"),
# 控制点的大小
sliderInput("pointsize", "Select the Point Size",
min = 1, max = 5, value = 2, step = 0.5),
# 添加回归线选项
checkboxInput("show_line", "Show Regression Line", value = TRUE)
),
mainPanel(
plotOutput("scatterPlot")  # 显示散点图
)
)
)
# 服务器端逻辑
server <- function(input, output, session) {
session$onSessionEnded(stopApp)  # 自动停止 Shiny
output$scatterPlot <- renderPlot({
req(sleep)  # 确保数据存在
# 创建基础散点图
p <- ggplot(sleep, aes_string(x = input$x, y = input$y)) +
geom_point(size = input$pointsize, color = "blue", alpha = 0.6) +
labs(title = paste("Scatterplot of", input$x, "vs", input$y),
x = input$x,
y = input$y) +
theme_minimal(base_size = 14)
# 如果用户勾选了回归线，添加线性拟合
if (input$show_line) {
p <- p + geom_smooth(method = "lm", se = TRUE, color = "red")
}
p
})
}
# 运行 Shiny App
shinyApp(ui = ui, server = server)
sleep2 <- sleep %>%
select(gender=="Female" | "Male")
sleep2 <- sleep %>%
select(gender=="Female" | gender=="Male")
sleep <- read.csv("/Users/sunyunbo/Desktop/BIS15W2025_group7-main/Yitong's Folder/sleep_cycle_productivity.csv")
sleep <- clean_names(sleeping)
sleep
sleep2 <- sleep %>%
select(gender=="Female" | gender=="Male")
sleep2 <- sleep %>%
select(gender=="Female")
sleep2 <- sleep %>%
filter(gender=="Female" | "Male")
sleep2 <- sleep %>%
filter(gender=="Female" | gender=="Male")
ggplot(aes(x=mood_score,y=sleep_quality))+
geom_jitter(color = "blue", alpha = 0.6, width = 0.2, height = 0.2) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "Correlation between Sleep Quality and Mood Score",
x = "Mood Score",
y = "Sleep Quality") +
theme_minimal()
sleep2 <- sleep %>%
filter(gender=="Female" | gender=="Male")
ggplot(aes(x=mood_score,y=sleep_quality, fill=gender))+
geom_jitter(color = "blue", alpha = 0.6, width = 0.2, height = 0.2) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "Correlation between Sleep Quality and Mood Score",
x = "Mood Score",
y = "Sleep Quality") +
theme_minimal()
sleep2 <- sleep %>%
filter(gender=="Female" | gender=="Male")
sleep2 <- sleep %>%
filter(gender=="Female" | gender=="Male") %>%
ggplot(aes(x=mood_score,y=sleep_quality, fill=gender))+
geom_jitter(color = "blue", alpha = 0.6, width = 0.2, height = 0.2) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "Correlation between Sleep Quality and Mood Score",
x = "Mood Score",
y = "Sleep Quality") +
theme_minimal()
sleep2 <- sleep %>%
filter(gender=="Female" | gender=="Male") %>%
ggplot(aes(x=mood_score,y=sleep_quality, fill=gender))+
geom_jitter(color = "blue", alpha = 0.6, width = 0.2, height = 0.2) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "Correlation between Sleep Quality and Mood Score",
x = "Mood Score",
y = "Sleep Quality") +
theme_minimal()
sleep2 <- sleep %>%
filter(gender=="Female" | gender=="Male") %>%
ggplot(aes(x=mood_score,y=sleep_quality, fill=gender))+
geom_jitter(color = "blue", alpha = 0.6, width = 0.2, height = 0.2) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "Correlation between Sleep Quality and Mood Score",
x = "Mood Score",
y = "Sleep Quality") +
theme_minimal()
sleep2 <- sleep %>%
filter(gender=="Female" | gender=="Male") %>%
ggplot(sleep2, aes(x = mood_score, y = sleep_quality)) +
geom_jitter(aes(color = gender), alpha = 0.6, width = 0.2, height = 0.2) +
geom_smooth(aes(color = gender), method = "lm", se = TRUE) +
labs(
title = "Correlation between Sleep Quality and Mood Score",
x = "Mood Score",
y = "Sleep Quality"
) +
theme_minimal()
sleep2 <- sleep %>%
filter(gender=="Female" | gender=="Male")
ggplot(sleep2, aes(x = mood_score, y = sleep_quality)) +
geom_jitter(aes(color = gender), alpha = 0.6, width = 0.2, height = 0.2) +
geom_smooth(aes(color = gender), method = "lm", se = TRUE) +
labs(
title = "Correlation between Sleep Quality and Mood Score",
x = "Mood Score",
y = "Sleep Quality"
) +
theme_minimal()
ggplot(sleep2, aes(x = sleep_quality, fill = gender)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Sleep Quality by Gender",
x = "Sleep Quality",
y = "Density") +
theme_minimal()
sleep2 %>%
group_by(gender) %>%
summarise(
mean_sleep_quality = mean(sleep_quality, na.rm = TRUE),
sd_sleep_quality = sd(sleep_quality, na.rm = TRUE)
)
t.test(sleep_quality ~ gender, data = sleep2)
ggplot(sleep2, aes(x = mood_score, fill = gender)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Sleep Quality by Gender",
x = "Sleep Quality",
y = "Density") +
theme_minimal()
sleep_consistency <- sleeping %>%
group_by(person_id) %>%
summarise(sleep_consistency = sd(total_sleep_hours, na.rm = TRUE), # 计算睡眠一致性（sd）
avg_mood = mean(mood_score, na.rm = TRUE))
ggplot(sleep_consistency, aes(x = sleep_consistency, y = avg_mood)) +
geom_jitter(color = "blue", alpha = 0.6) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "Sleep Consistency vs Mood Score",
x = "Sleep Consistency (SD of Sleep Hours)",
y = "Average Mood Score") +
theme_minimal()
sleep_consistency <- sleeping %>%
group_by(gender) %>%  # 添加 gender 分组
summarise(
sleep_consistency = sd(total_sleep_hours, na.rm = TRUE), # 计算睡眠一致性
avg_mood = mean(mood_score, na.rm = TRUE)
)
ggplot(sleep_consistency, aes(x = sleep_consistency, fill = gender, color = gender)) +
geom_density(alpha = 0.5) +  # 透明度 0.5，让曲线叠加更清晰
labs(
title = "Density Plot of Sleep Consistency by Gender",
x = "Sleep Consistency (SD of Sleep Hours)",
y = "Density"
) +
theme_minimal()
sleep_consistency <- sleeping %>%
filter(gender=="Female" | gender=="Male")
group_by(gender) %>%  # 添加 gender 分组
summarise(
sleep_consistency = sd(total_sleep_hours, na.rm = TRUE), # 计算睡眠一致性
avg_mood = mean(mood_score, na.rm = TRUE)
)
sleep_consistency <- sleeping %>%
filter(gender=="Female" | gender=="Male")
summarise(
sleep_consistency = sd(total_sleep_hours, na.rm = TRUE), # 计算睡眠一致性
avg_mood = mean(mood_score, na.rm = TRUE)
)
sleep_consistency <- sleeping %>%
filter(gender=="Female" | gender=="Male")
ggplot(sleep_consistency, aes(x = sleep_consistency, fill = gender, color = gender)) +
geom_density(alpha = 0.5) +  # 透明度 0.5，让曲线叠加更清晰
labs(
title = "Density Plot of Sleep Consistency by Gender",
x = "Sleep Consistency (SD of Sleep Hours)",
y = "Density"
) +
theme_minimal()
sleep_consistency <- sleeping %>%
filter(gender=="Female" | gender=="Male")
ggplot(sleep_consistency, aes(x = sleep_consistency, fill = gender)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Sleep Consistency by Gender",
x = "Sleep Consistency",
y = "Density") +
theme_minimal()
sleep_consistency <- sleeping %>%
filter(gender=="Female" | gender=="Male")
ggplot(sleep_consistency, aes(x = sleep_consistency, fill = gender)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Sleep Consistency by Gender",
x = "Sleep Consistency",
y = "Density") +
theme_minimal()
sleep_consistency <- sleeping %>%
group_by(person_id) %>%
summarise(sleep_consistency = sd(total_sleep_hours, na.rm = TRUE), # 计算睡眠一致性（sd）
avg_mood = mean(mood_score, na.rm = TRUE))
ggplot(sleep_consistency, aes(x = sleep_consistency, y = avg_mood)) +
geom_jitter(color = "blue", alpha = 0.6) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "Sleep Consistency vs Mood Score",
x = "Sleep Consistency (SD of Sleep Hours)",
y = "Average Mood Score") +
theme_minimal()
sleep_consistency <- sleeping_consistency %>%
filter(gender=="Female" | gender=="Male")
sleep_consistency <- sleeping %>%
group_by(person_id) %>%
summarise(sleep_consistency = sd(total_sleep_hours, na.rm = TRUE), # 计算睡眠一致性（sd）
avg_mood = mean(mood_score, na.rm = TRUE))
ggplot(sleep_consistency, aes(x = sleep_consistency, y = avg_mood)) +
geom_jitter(color = "blue", alpha = 0.6) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "Sleep Consistency vs Mood Score",
x = "Sleep Consistency (SD of Sleep Hours)",
y = "Average Mood Score") +
theme_minimal()
sleep_consistency <- sleeping_consistency %>%
filter(gender=="Female" | gender=="Male")
sleep_consistency <- sleeping %>%
group_by(person_id) %>%
summarise(sleep_consistency = sd(total_sleep_hours, na.rm = TRUE), # 计算睡眠一致性（sd）
avg_mood = mean(mood_score, na.rm = TRUE))
sleep_consistency <- sleeping_consistency %>%
filter(gender=="Female" | gender=="Male")
sleep_consistency %>%
filter(gender=="Female" | gender=="Male")
sleep_consistency
ggplot(sleep2, aes(x = mood_score, fill = gender)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Mood Scores by Gender",
x = "Mood Scores",
y = "Density") +
theme_minimal()
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
# UI 部分
ui <- fluidPage(
titlePanel("Sleep Quality vs. Mood Score Analysis"),
sidebarLayout(
sidebarPanel(
# 选择 X 变量
selectInput("x",
"Select X Variable",
choices = c("sleep_quality", "mood_score"),
selected = "sleep_quality"),
# 选择 Y 变量
selectInput("y",
"Select Y Variable",
choices = c("sleep_quality", "mood_score"),
selected = "mood_score"),
# 控制点的大小
sliderInput("pointsize", "Select the Point Size",
min = 1, max = 5, value = 2, step = 0.5),
# 添加回归线选项
checkboxInput("show_line", "Show Regression Line", value = TRUE)
),
mainPanel(
plotOutput("scatterPlot")  # 显示散点图
)
)
)
# 服务器端逻辑
server <- function(input, output, session) {
session$onSessionEnded(stopApp)  # 自动停止 Shiny
output$scatterPlot <- renderPlot({
req(sleep)  # 确保数据存在
# 创建基础散点图
p <- ggplot(sleep, aes_string(x = input$x, y = input$y)) +
geom_point(size = input$pointsize, color = "blue", alpha = 0.6) +
labs(title = paste("Scatterplot of", input$x, "vs", input$y),
x = input$x,
y = input$y) +
theme_minimal(base_size = 14)
# 如果用户勾选了回归线，添加线性拟合
if (input$show_line) {
p <- p + geom_smooth(method = "lm", se = TRUE, color = "red")
}
p
})
}
# 运行 Shiny App
shinyApp(ui = ui, server = server)
cor.test(sleep$sleep_quality, sleeping$mood_score)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(ggplot2)
library(dplyr)
sleep <- read.csv("/Users/sunyunbo/Desktop/BIS15W2025_group7-main/Yitong's Folder/sleep_cycle_productivity.csv")
sleep <- clean_names(sleeping)
sleep <- clean_names(sleep)
sleep
str(sleep)
sleep_avg <- sleep %>%
group_by(mood_score) %>%
summarize(avg_sleep_quality=mean(sleep_quality, na.rm=T))
sleep_avg
cor.test(sleep$sleep_quality, sleep$mood_score)
sleep %>%
ggplot(aes(x=mood_score,y=sleep_quality))+
geom_jitter(color = "blue", alpha = 0.6, width = 0.2, height = 0.2) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "Correlation between Sleep Quality and Mood Score",
x = "Mood Score",
y = "Sleep Quality") +
theme_minimal()
sleep %>%
ggplot(aes(x=mood_score,y=sleep_quality))+
geom_jitter(color = "blue", alpha = 0.6, width = 0.2, height = 0.2) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "Correlation between Sleep Quality and Mood Score",
x = "Mood Score",
y = "Sleep Quality") +
theme_minimal()
cor.test(sleep$sleep_quality, sleeping$mood_score)
cor.test(sleep$sleep_quality, sleep$mood_score)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
ui <- fluidPage(
titlePanel("Sleep Quality vs. Mood Score Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("x",
"Select X Variable",
choices = c("sleep_quality", "mood_score"),
selected = "sleep_quality"),
selectInput("y",
"Select Y Variable",
choices = c("sleep_quality", "mood_score"),
selected = "mood_score"),
sliderInput("pointsize", "Select the Point Size",
min = 1, max = 5, value = 2, step = 0.5),
checkboxInput("show_line", "Show Regression Line", value = TRUE)
),
mainPanel(
plotOutput("scatterPlot")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$scatterPlot <- renderPlot({
req(sleep)
p <- ggplot(sleep, aes_string(x = input$x, y = input$y)) +
geom_point(size = input$pointsize, color = "blue", alpha = 0.6) +
labs(title = paste("Scatterplot of", input$x, "vs", input$y),
x = input$x,
y = input$y) +
theme_minimal(base_size = 14)
if (input$show_line) {
p <- p + geom_smooth(method = "lm", se = TRUE, color = "red")
}
p
})
}
shinyApp(ui = ui, server = server)
sleep2 <- sleep %>%
filter(gender=="Female" | gender=="Male")
ggplot(sleep2, aes(x = mood_score, y = sleep_quality)) +
geom_jitter(aes(color = gender), alpha = 0.6, width = 0.2, height = 0.2) +
geom_smooth(aes(color = gender), method = "lm", se = TRUE) +
labs(
title = "Correlation between Sleep Quality and Mood Score",
x = "Mood Score",
y = "Sleep Quality"
) +
theme_minimal()
ggplot(sleep2, aes(x = sleep_quality, fill = gender)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Sleep Quality by Gender",
x = "Sleep Quality",
y = "Density") +
theme_minimal()
ggplot(sleep2, aes(x = mood_score, fill = gender)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Mood Scores by Gender",
x = "Mood Scores",
y = "Density") +
theme_minimal()
sleep2 %>%
group_by(gender) %>%
summarise(
mean_sleep_quality = mean(sleep_quality, na.rm = TRUE),
sd_sleep_quality = sd(sleep_quality, na.rm = TRUE)
)
t.test(sleep_quality ~ gender, data = sleep2)
